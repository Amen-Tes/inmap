// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cloud.proto

package cloudrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_Complete Status = 0
	Status_Failed   Status = 1
	Status_Missing  Status = 2
	Status_Running  Status = 3
)

var Status_name = map[int32]string{
	0: "Complete",
	1: "Failed",
	2: "Missing",
	3: "Running",
}
var Status_value = map[string]int32{
	"Complete": 0,
	"Failed":   1,
	"Missing":  2,
	"Running":  3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cloud_877544bb241d427f, []int{0}
}

// JobSpec is the input for the RunJob service.
type JobSpec struct {
	// Version is the required InMAP version.
	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	// Name is a user-specified name for the job.
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	// Cmd is the command to be run, e.g., [inmap run steady]
	Cmd []string `protobuf:"bytes,3,rep,name=Cmd,proto3" json:"Cmd,omitempty"`
	// Args are the command line arguments, e.g., [--Layers, 2, --steady, true]
	Args []string `protobuf:"bytes,4,rep,name=Args,proto3" json:"Args,omitempty"`
	// MemoryGB specifies the required gigabytes of RAM memory for the
	// simulation.
	MemoryGB int32 `protobuf:"varint,5,opt,name=MemoryGB,proto3" json:"MemoryGB,omitempty"`
	// FileData holds the contents of any local files referred to by Args
	FileData             map[string][]byte `protobuf:"bytes,7,rep,name=FileData,proto3" json:"FileData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JobSpec) Reset()         { *m = JobSpec{} }
func (m *JobSpec) String() string { return proto.CompactTextString(m) }
func (*JobSpec) ProtoMessage()    {}
func (*JobSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cloud_877544bb241d427f, []int{0}
}
func (m *JobSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobSpec.Unmarshal(m, b)
}
func (m *JobSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobSpec.Marshal(b, m, deterministic)
}
func (dst *JobSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSpec.Merge(dst, src)
}
func (m *JobSpec) XXX_Size() int {
	return xxx_messageInfo_JobSpec.Size(m)
}
func (m *JobSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSpec.DiscardUnknown(m)
}

var xxx_messageInfo_JobSpec proto.InternalMessageInfo

func (m *JobSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *JobSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobSpec) GetCmd() []string {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *JobSpec) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *JobSpec) GetMemoryGB() int32 {
	if m != nil {
		return m.MemoryGB
	}
	return 0
}

func (m *JobSpec) GetFileData() map[string][]byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

type JobStatus struct {
	// Status holds the current status of the job.
	Status  Status `protobuf:"varint,1,opt,name=Status,proto3,enum=cloudrpc.Status" json:"Status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	// Unix time, the number of seconds elapsed since January 1, 1970 UTC
	StartTime            int64    `protobuf:"varint,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	CompletionTime       int64    `protobuf:"varint,4,opt,name=CompletionTime,proto3" json:"CompletionTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}
func (*JobStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cloud_877544bb241d427f, []int{1}
}
func (m *JobStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStatus.Unmarshal(m, b)
}
func (m *JobStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStatus.Marshal(b, m, deterministic)
}
func (dst *JobStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatus.Merge(dst, src)
}
func (m *JobStatus) XXX_Size() int {
	return xxx_messageInfo_JobStatus.Size(m)
}
func (m *JobStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatus.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatus proto.InternalMessageInfo

func (m *JobStatus) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Complete
}

func (m *JobStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *JobStatus) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *JobStatus) GetCompletionTime() int64 {
	if m != nil {
		return m.CompletionTime
	}
	return 0
}

type JobOutput struct {
	// Files holds the contents of each output file.
	Files                map[string][]byte `protobuf:"bytes,1,rep,name=Files,proto3" json:"Files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JobOutput) Reset()         { *m = JobOutput{} }
func (m *JobOutput) String() string { return proto.CompactTextString(m) }
func (*JobOutput) ProtoMessage()    {}
func (*JobOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_cloud_877544bb241d427f, []int{2}
}
func (m *JobOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobOutput.Unmarshal(m, b)
}
func (m *JobOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobOutput.Marshal(b, m, deterministic)
}
func (dst *JobOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobOutput.Merge(dst, src)
}
func (m *JobOutput) XXX_Size() int {
	return xxx_messageInfo_JobOutput.Size(m)
}
func (m *JobOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_JobOutput.DiscardUnknown(m)
}

var xxx_messageInfo_JobOutput proto.InternalMessageInfo

func (m *JobOutput) GetFiles() map[string][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

type JobName struct {
	// Version is the required InMAP version.
	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	// Name is a user-specified name for the job.
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobName) Reset()         { *m = JobName{} }
func (m *JobName) String() string { return proto.CompactTextString(m) }
func (*JobName) ProtoMessage()    {}
func (*JobName) Descriptor() ([]byte, []int) {
	return fileDescriptor_cloud_877544bb241d427f, []int{3}
}
func (m *JobName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobName.Unmarshal(m, b)
}
func (m *JobName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobName.Marshal(b, m, deterministic)
}
func (dst *JobName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobName.Merge(dst, src)
}
func (m *JobName) XXX_Size() int {
	return xxx_messageInfo_JobName.Size(m)
}
func (m *JobName) XXX_DiscardUnknown() {
	xxx_messageInfo_JobName.DiscardUnknown(m)
}

var xxx_messageInfo_JobName proto.InternalMessageInfo

func (m *JobName) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *JobName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*JobSpec)(nil), "cloudrpc.JobSpec")
	proto.RegisterMapType((map[string][]byte)(nil), "cloudrpc.JobSpec.FileDataEntry")
	proto.RegisterType((*JobStatus)(nil), "cloudrpc.JobStatus")
	proto.RegisterType((*JobOutput)(nil), "cloudrpc.JobOutput")
	proto.RegisterMapType((map[string][]byte)(nil), "cloudrpc.JobOutput.FilesEntry")
	proto.RegisterType((*JobName)(nil), "cloudrpc.JobName")
	proto.RegisterEnum("cloudrpc.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudRPCClient is the client API for CloudRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudRPCClient interface {
	// RunJob performs an InMAP simulation and returns the paths to the
	// output file(s).
	RunJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*JobStatus, error)
	// Status returns the status of the simulation with the
	// requested name.
	Status(ctx context.Context, in *JobName, opts ...grpc.CallOption) (*JobStatus, error)
	// Output returns the output file(s) of the
	// requested simulation name.
	Output(ctx context.Context, in *JobName, opts ...grpc.CallOption) (*JobOutput, error)
	// Delete deletes the specified simulation.
	Delete(ctx context.Context, in *JobName, opts ...grpc.CallOption) (*JobName, error)
}

type cloudRPCClient struct {
	cc *grpc.ClientConn
}

func NewCloudRPCClient(cc *grpc.ClientConn) CloudRPCClient {
	return &cloudRPCClient{cc}
}

func (c *cloudRPCClient) RunJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/cloudrpc.CloudRPC/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudRPCClient) Status(ctx context.Context, in *JobName, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/cloudrpc.CloudRPC/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudRPCClient) Output(ctx context.Context, in *JobName, opts ...grpc.CallOption) (*JobOutput, error) {
	out := new(JobOutput)
	err := c.cc.Invoke(ctx, "/cloudrpc.CloudRPC/Output", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudRPCClient) Delete(ctx context.Context, in *JobName, opts ...grpc.CallOption) (*JobName, error) {
	out := new(JobName)
	err := c.cc.Invoke(ctx, "/cloudrpc.CloudRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudRPCServer is the server API for CloudRPC service.
type CloudRPCServer interface {
	// RunJob performs an InMAP simulation and returns the paths to the
	// output file(s).
	RunJob(context.Context, *JobSpec) (*JobStatus, error)
	// Status returns the status of the simulation with the
	// requested name.
	Status(context.Context, *JobName) (*JobStatus, error)
	// Output returns the output file(s) of the
	// requested simulation name.
	Output(context.Context, *JobName) (*JobOutput, error)
	// Delete deletes the specified simulation.
	Delete(context.Context, *JobName) (*JobName, error)
}

func RegisterCloudRPCServer(s *grpc.Server, srv CloudRPCServer) {
	s.RegisterService(&_CloudRPC_serviceDesc, srv)
}

func _CloudRPC_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRPCServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudrpc.CloudRPC/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRPCServer).RunJob(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudRPC_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRPCServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudrpc.CloudRPC/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRPCServer).Status(ctx, req.(*JobName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudRPC_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRPCServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudrpc.CloudRPC/Output",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRPCServer).Output(ctx, req.(*JobName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudrpc.CloudRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRPCServer).Delete(ctx, req.(*JobName))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudrpc.CloudRPC",
	HandlerType: (*CloudRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunJob",
			Handler:    _CloudRPC_RunJob_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CloudRPC_Status_Handler,
		},
		{
			MethodName: "Output",
			Handler:    _CloudRPC_Output_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CloudRPC_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud.proto",
}

func init() { proto.RegisterFile("cloud.proto", fileDescriptor_cloud_877544bb241d427f) }

var fileDescriptor_cloud_877544bb241d427f = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0xed, 0x34, 0x6d, 0x9a, 0xde, 0xae, 0x4b, 0xbc, 0xfa, 0x30, 0x14, 0xd1, 0x90, 0x07, 0x09,
	0x3e, 0x14, 0xa9, 0x82, 0x8b, 0xeb, 0x8b, 0x66, 0x5d, 0x61, 0xa1, 0x2a, 0xb3, 0xe2, 0xfb, 0xb4,
	0x1d, 0x4a, 0x30, 0xc9, 0x84, 0xcc, 0x44, 0x28, 0x7e, 0x87, 0xff, 0xe6, 0x7f, 0xf8, 0x03, 0x32,
	0x33, 0xc9, 0x96, 0xb8, 0xe2, 0xd2, 0xb7, 0x7b, 0xce, 0x9c, 0xc3, 0x9c, 0x7b, 0x32, 0x81, 0xd9,
	0x26, 0x97, 0xcd, 0x76, 0x51, 0xd5, 0x52, 0x4b, 0x0c, 0x2c, 0xa8, 0xab, 0x4d, 0xfc, 0x9b, 0xc0,
	0xe4, 0x4a, 0xae, 0xaf, 0x2b, 0xb1, 0x41, 0x0a, 0x93, 0xaf, 0xa2, 0x56, 0x99, 0x2c, 0x29, 0x89,
	0x48, 0x32, 0x65, 0x1d, 0x44, 0x84, 0xd1, 0x47, 0x5e, 0x08, 0x3a, 0xb4, 0xb4, 0x9d, 0x31, 0x04,
	0x2f, 0x2d, 0xb6, 0xd4, 0x8b, 0xbc, 0x64, 0xca, 0xcc, 0x68, 0x54, 0x6f, 0xeb, 0x9d, 0xa2, 0x23,
	0x4b, 0xd9, 0x19, 0xe7, 0x10, 0xac, 0x44, 0x21, 0xeb, 0xfd, 0x87, 0x77, 0x74, 0x1c, 0x91, 0x64,
	0xcc, 0x6e, 0x30, 0x9e, 0x43, 0x70, 0x99, 0xe5, 0xe2, 0x82, 0x6b, 0x4e, 0x27, 0x91, 0x97, 0xcc,
	0x96, 0x4f, 0x16, 0x5d, 0xb0, 0x45, 0x1b, 0x6a, 0xd1, 0x29, 0xde, 0x97, 0xba, 0xde, 0xb3, 0x1b,
	0xc3, 0xfc, 0x1c, 0xee, 0xf5, 0x8e, 0x4c, 0x9e, 0x6f, 0x62, 0xdf, 0x26, 0x37, 0x23, 0x3e, 0x84,
	0xf1, 0x77, 0x9e, 0x37, 0x2e, 0xf6, 0x09, 0x73, 0xe0, 0xf5, 0xf0, 0x8c, 0xc4, 0x3f, 0x09, 0x4c,
	0xcd, 0x05, 0x9a, 0xeb, 0x46, 0x61, 0x02, 0xbe, 0x9b, 0xac, 0xf9, 0x74, 0x19, 0x1e, 0x52, 0x38,
	0x9e, 0xb5, 0xe7, 0xa6, 0xa1, 0x95, 0x50, 0x8a, 0xef, 0xba, 0x2a, 0x3a, 0x88, 0x8f, 0x60, 0x7a,
	0xad, 0x79, 0xad, 0xbf, 0x64, 0x85, 0xa0, 0x5e, 0x44, 0x12, 0x8f, 0x1d, 0x08, 0x7c, 0x0a, 0xa7,
	0xa9, 0x2c, 0xaa, 0x5c, 0xe8, 0x4c, 0x96, 0x56, 0x32, 0xb2, 0x92, 0xbf, 0xd8, 0xf8, 0x87, 0x8d,
	0xf5, 0xa9, 0xd1, 0x55, 0xa3, 0xf1, 0x25, 0x8c, 0xcd, 0x86, 0x26, 0x95, 0xe9, 0xe6, 0x71, 0xaf,
	0x1b, 0xa7, 0xb1, 0xed, 0x28, 0x57, 0x8d, 0x13, 0xcf, 0xcf, 0x00, 0x0e, 0xe4, 0x51, 0xa5, 0xbc,
	0xb2, 0x2f, 0xc1, 0x7e, 0xdb, 0xa3, 0x5e, 0xc2, 0xb3, 0x37, 0x5d, 0x7f, 0x78, 0x02, 0x41, 0xbb,
	0x91, 0x08, 0x07, 0x08, 0xe0, 0x5f, 0xf2, 0x2c, 0x17, 0xdb, 0x90, 0xe0, 0x0c, 0x26, 0xab, 0x4c,
	0xa9, 0xac, 0xdc, 0x85, 0x43, 0x03, 0x58, 0x53, 0x96, 0x06, 0x78, 0xcb, 0x5f, 0x04, 0x82, 0xd4,
	0x6c, 0xc6, 0x3e, 0xa7, 0xb8, 0x04, 0x9f, 0x35, 0xe5, 0x95, 0x5c, 0xe3, 0xfd, 0x5b, 0x4f, 0x61,
	0xfe, 0xa0, 0x4f, 0xd9, 0x2b, 0xe3, 0x81, 0xf1, 0xb4, 0xd7, 0xf7, 0x3d, 0x26, 0xdb, 0x7f, 0x3c,
	0x6d, 0xcb, 0x77, 0x7a, 0x9c, 0x2e, 0x1e, 0xe0, 0x73, 0xf0, 0x2f, 0x84, 0x59, 0xed, 0x5f, 0x9e,
	0xdb, 0x54, 0x3c, 0x58, 0xfb, 0xf6, 0x6f, 0x7b, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x87,
	0xfb, 0xdf, 0x7c, 0x03, 0x00, 0x00,
}
